#SingleInstance Force

class Set {
	__New(args*) {
        this.map := Map()
		this.Size := 0
		for key, val in args {
			this.add(val)
		}
	}
	Find(target) {
		if this.map.Has(target)
			return this
		for val, _ in this.map {
			if HasMethod(val, "Find") {
				ret := val.Find(target)
				if ret
					return ret
			}
		}
	}
	add(key) {
		if !this.map.Has(key) {
			this.map[key] := ""
			this.Size++
		} 
	}
	contains(key) {
		return this.map.Has(key)
	}
	remove(key) {
		if this.map.Has(key) {
			this.map.Delete(key)
			this.Size--
		} 
		return key
	}
	get(key) {
		return this.map[key]
	}
	union(other) {
		table2 := Set()
		for item in other {
			table2.add(item)
		}
		for item in this {
			table2.add(item)
		}
		return table2
	}
	__enum(vars) {
        return this.map.__enum()
    }
	Str() {
		s := "{"
		for item in this {
			s .= (HasMethod(item, "Str") ? item.Str() : item) ", "
		}
		return SubStr(s,1,-2) "}"
	}
}