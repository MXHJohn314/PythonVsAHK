;Assign04
ListLines(false)
#Warn All, Off

; This Program documents the run times of Prim's and Kruskal's algorithms. It uses QueryPerformanceFrequency and QueryPerformanceCounter to compute time intervals, and saves results to a file.

; frequency is the number of clock ticks per second on this machine. It will be used to divide the interval im clock ticks, so that we end up with actual seconds instead of a machine-specific time interval.
DllCall("QueryPerformanceFrequency", "Int64*", &frequency := 0)

; read 2d matrix from file
adjMatFromFile(filename) {
    ;Create an adj/weight matrix from a file with verts, neighbors, and weights.
	loop read filename {
		if(A_Index = 1) {
			n_verts := A_LoopReadLine
			adjmat := []
			loop n_verts {
				array := []
				loop n_verts
					array.Push("")
				adjmat.Push(array)
			}
			loop n_verts
				adjmat[A_Index][A_Index] := 0
		} else {
			int_list := []
			matches := StrSplit(A_LoopReadLine, A_Space)
			for i, s in matches
				if s != ""
					int_list.Push(s)
			vert := int_list.RemoveAt(1) + 1
			if(Mod(int_list.Length, 2) != 0)
				continue
			n_neighbors := Floor(int_list.Length / 2)
			neighbors := [], distances := []
			for i, value in int_list {
				if(Mod(i, 2) != 0)
					neighbors.Push(value + 1)
				else
					distances.Push(value)
			}
			loop n_neighbors
				adjmat[vert][neighbors[A_Index]] := distances[A_Index]
		}
	}
	for i, row in adjmat
		for j, val in row
			if adjmat[j][i] != val
				throw Error("invalid matrix. [" i ", " j "] has " (val ? val : "null") ", but [" j ", " i "] has " (adjmat[j][i] ? adjmat[j][i] : "null"))
	return adjmat
}

; subroutine for finding a subset within a set of sets
FindSets(MapOfSets, pointa, pointB) {
	for set, _ in MapOfSets{
		if InStr(set, pointa){
			s1 := set
			break
		}
	}
	for set, _ in MapOfSets{
		if InStr(set, pointB)
			return [s1, set]
	}
	
}

; sub routine for sorting in kruskal's
sortEdges(w) {
	t := Map()
	for i, row in w {
		for j, cost in row {
			if !cost
				continue
			if !t.Has(Chr(cost))
				t.Set(Chr(cost), [])
			t.Get(Chr(cost)).Push("|" i "|_|" j "|")
		}
	}
	return t
}

;Carry out Kruskal's using W as a weight/adj matrix.
kruskal(w) {
	global frequency
	e := 0
	start := 0
	DllCall("QueryPerformanceCounter", "Int64*", &start)
	solution := []
	sets := Map()
	loop w.Length
		sets.Set("|" A_Index "|", "")
	DllCall("QueryPerformanceCounter", "Int64*", &e := 0)
	t1 := e - start
	sorted := sortEdges(W)
	DllCall("QueryPerformanceCounter", "Int64*", &start)
	for c, edges in sorted {
		for _, ab in edges {
			f := StrSplit(ab, "_")
			setAB := FindSets(sets, f[1],  f[2])
			if setAB[1] = setAB[2]
				continue
			solution.Push({a: f[1], b:  f[2], cost: Ord(c)}),
			sets.Delete(setAB[1]),
			sets.Delete(setAB[2]),
			sets.Set(setAB[1] setAB[2], "")
		}
	}
	DllCall("QueryPerformanceCounter", "Int64*", &e := 0)
	t2 := e - start
	time := (t1 + t2)/frequency
	return {
		solution: solution,
		cost: CalcSum(solution),
		time: time
	}
}

;Carry out Prim's using W as a weight/adj matrix.
prim(W) {
	global frequency
	DllCall("QueryPerformanceCounter", "Int64*", &s := 0)
    visited := "",
    solution := [],
    edgeMap := Map(),
	times := []
	list := []
    for i, row in W {
		for j, cost in row {
			if j != i && cost {
				c := Chr(cost)
				if edgeMap.Has(c)
					edgeMap.Get(c).push({a: "|" i "|" , b:  "|" j "|"})
				else {
					DllCall("QueryPerformanceCounter", "Int64*", &e := 0)
					times.Push(e - s)
					edgeMap.Set(c, [{a: "|" i "|" , b:  "|" j "|"}])
					DllCall("QueryPerformanceCounter", "Int64*", &s := 0)
				}

			}
		}
	}
	for key, edgeList in edgeMap {
		for _, verts in edgeList {
			visited .= verts.a verts.b,
			solution.Push({a: verts.a, b: verts.b, cost: Ord(key)}),
			edgeList.RemoveAt(1)
			break
		}
		break
	}
	i := 1
	while solution.Length < W.Length - 1 {
		outerBreak := false
		for cost, edges in edgeMap {
			c := Ord(cost)
			if edges.Length = 0 {
				edgeMap.Delete(cost)
				break
			}
			i := 1
			while i <= edges.Length {
				v := edges[i],
				contains1 := inStr(visited, v.a) > 0,
				contains2 := inStr(visited, v.b) > 0
				if contains1 && contains2 {
					edges.RemoveAt(i--)
				} else if contains1 {
					visited .= v.b,
					solution.push({a: v.a, b: v.b, cost: c})
					edges.RemoveAt(i),
					i := 0
					outerBreak := true
					break
				}
				i++
			}
			if solution.Length > W.Length - 1 {
				break
			}
			if  outerBreak {
				break
			}
		}
	}
	DllCall("QueryPerformanceCounter", "Int64*", &e := 0)
	totalTime := 0
	for t in times
		totalTime += t
    return {
		solution: solution,
		cost: CalcSum(solution),
		time: totalTime/frequency
	}
}

; returns the sum of the cost of all edges in a solution
CalcSum(solution) {
	sum_ := 0
	for key, val in solution
		sum_ += val.cost
	return sum_
}

; calls the specified algorithm to be run with a given graph file
runAlgorithm(fileName, algo) {
	graph := adjMatFromFile(fileName)
	return algo.Call(graph)
}

; Turns results into a json string for saving to files..
getResultString(res) {
	s := "{"
	a := [25, 50, 100, 250, 500]
	for algName, version in res {
		s .= "`"" algName "`":{"
		for versionName, list in version {
			s .= "`"" versionName "`":["
			for i, value in list {
				s .= value.time  ","
			}
			s := SubStr(s, 1, -1) "],"
		}
		s := SubStr(s, 1, -1) "},"
	}
	return SubStr(s, 1, -1) "}`n"
}

; runs every combination of sparse or dense, kruskal or prim `runCount` number of times, and writes results to a file.
main(runCount){
	loop runCount {
		ToolTip(A_Index "/" runCount)
		r := run()
		FileAppend(r, "ahk_results.txt")
	}
}

; returns combinations of sparse or dense, kruskal or prim, for all odd vert graphs from 25 - 99
run(){
	resKrusSparse := [], resPrimSparse := []
	resKrusDense := [], resPrimDense := []
	loop 100 - 25 {
		if Mod(A_Index - 1 + 25, 2) = 0 {
			n := A_Index + 23
			resKrusSparse.Push(kruskal(adjMatFromFile("graph_verts" n "A.txt")))
			resKrusDense.Push(kruskal(adjMatFromFile("graph_verts" n "B.txt")))
			resPrimSparse.Push(prim(adjMatFromFile("graph_verts" n "A.txt")))
			resPrimDense.Push(prim(adjMatFromFile("graph_verts" n "B.txt")))
		}
	}
	
	return getResultString(
		Map(
			"krus", Map("sparse", resKrusSparse, "dense", resKrusDense),
			"prim", Map("sparse", resPrimSparse, "dense", resPrimDense)
		)	
	)
}

main(100)
