;Assign04
ListLines(false)
#Warn All, Off

CompareEdges := (a, b) => ((a[3] < b[3]) ? -1 : (b[3] < a[3]) ? 1 : 0)
CmpPointAB := (x, y) => x.a < y.b? -1 : x.a < y.b ? 1 : 0
reverseCmpEdge := (a, b) => ((a[3] > b[3]) ? -1 : (b[3] > a[3]) ? 1 : 0)
ONE_THOUSAND := Integer(10000000)

adjMatFromFile(filename) {
    ;Create an adj/weight matrix from a file with verts, neighbors, and weights.
	loop read filename {
		if(A_Index = 1) {
			n_verts := A_LoopReadLine
			adjmat := []
			loop n_verts {
				array := []
				loop n_verts
					array.Push("")
				adjmat.Push(array)
			}
			loop n_verts
				adjmat[A_Index][A_Index] := 0
		} else {
			int_list := []
			matches := StrSplit(A_LoopReadLine, A_Space)
			for i, s in matches
				if s != ""
					int_list.Push(s)
			vert := int_list.RemoveAt(1) + 1
			if(Mod(int_list.Length, 2) != 0)
				continue
			n_neighbors := Floor(int_list.Length / 2)
			neighbors := [], distances := []
			for i, value in int_list {
				if(Mod(i, 2) != 0)
					neighbors.Push(value + 1)
				else
					distances.Push(value)
			}
			loop n_neighbors
				adjmat[vert][neighbors[A_Index]] := distances[A_Index]
		}
	}
	for i, row in adjmat
		for j, val in row
			if adjmat[j][i] != val
				throw Error("invalid matrix. [" i ", " j "] has " (val ? val : "null") ", but [" j ", " i "] has " (adjmat[j][i] ? adjmat[j][i] : "null"))
	return adjmat
}

FindSets(MapOfSets, pointa, pointB) {
	for set, _ in MapOfSets{
		if InStr(set, pointa){
			s1 := set
			break
		}
	}
	for set, _ in MapOfSets{
		if InStr(set, pointB)
			return [s1, set]
	}
	
}

sortEdges(w) {
	t := Map()
	for i, row in w {
		for j, cost in row {
			if !cost
				continue
			if !t.Has(Chr(cost))
				t.Set(Chr(cost), [])
			t.Get(Chr(cost)).Push("|" i "|_|" j "|")
		}
	}
	return t
}

kruskal(w) {
    ;Carry out Kruskal's using W as a weight/adj matrix.
	DllCall("QueryPerformanceCounter", "Int64*", &start := 0)
	solution := []
	sets := Map()
	loop w.Length
		sets.Set("|" A_Index "|", "")
	for c, edges in sortEdges(W) {
		for _, ab in edges {
			f := StrSplit(ab, "_")
			setAB := FindSets(sets, f[1],  f[2])
			if setAB[1] = setAB[2]
				continue
			solution.Push({a: f[1], b:  f[2], cost: Ord(c)}),
			sets.Delete(setAB[1]),
			sets.Delete(setAB[2]),
			sets.Set(setAB[1] setAB[2], "")
		}
	}
	DllCall("QueryPerformanceCounter", "Int64*", &end := 0)
	return {
		solution: solution,
		cost: CalcSum(solution),
		time: (end - start)/ONE_THOUSAND
	}
}

prim(W) {
	DllCall("QueryPerformanceCounter", "Int64*", &start := 0)
    visited := "",
    solution := [],
    edgeMap := Map(),
	list := []
    for i, row in W {
		for j, cost in row {
			if j != i && cost {
				c := Chr(cost)
				if edgeMap.Has(c)
					edgeMap.Get(c).push({a: "|" i "|" , b:  "|" j "|"})
				else
					edgeMap.Set(c, [{a: "|" i "|" , b:  "|" j "|"}])
			}
		}
	}
	for key, edgeList in edgeMap {
		for _, verts in edgeList {
			visited .= verts.a verts.b,
			solution.Push({a: verts.a, b: verts.b, cost: Ord(key)}),
			edgeList.RemoveAt(1)
			break
		}
		break
	}
	i := 1
	while solution.Length < W.Length - 1 {
		outerBreak := false
		for cost, edges in edgeMap {
			c := Ord(cost)
			if edges.Length = 0 {
				edgeMap.Delete(cost)
				break
			}
			i := 1
			while i <= edges.Length {
				v := edges[i],
				contains1 := inStr(visited, v.a) > 0,
				contains2 := inStr(visited, v.b) > 0
				if contains1 && contains2 {
					edges.RemoveAt(i--)
				} else if contains1 {
					visited .= v.b,
					solution.push({a: v.a, b: v.b, cost: c})
					edges.RemoveAt(i),
					i := 0
					outerBreak := true
					break
				}
				i++
			}
			if solution.Length > W.Length - 1 {
				break
			}
			if  outerBreak {
				break
			}
		}
	}
	DllCall("QueryPerformanceCounter", "Int64*", &end := 0)
    return {
		solution: solution,
		cost: CalcSum(solution),
		time: (end - start)/ONE_THOUSAND
	}
}

CalcSum(solution) {
	sum_ := 0
	for key, val in solution
		sum_ += val.cost
	return sum_
}

main(){
	graphs := []
	for i, size in [25, 50, "100_", 250, 500]
		for j, version in ["A", "B"]
			graphs.Push("graph_verts" size version ".txt")
	results := []
	for key, val in graphs
		results.push(runAlgorithms(val))
	for key, val in results
		s .= printResults(val)
	MsgBox(s)
}

runAlgorithms(fileName) {
	graph := adjMatFromFile(fileName)
	return {
		name: SubStr(fileName, 1, -4),
		krus: kruskal(graph),
		prim: prim(graph),
	}
}

printResults(res) {
	return ""
. "`n" res.name ":"
. "`n krus:"
. "`n  cost: " res.krus.cost ", time: " res.krus.time ""
. "`n prim:"
. "`n  cost: " res.prim.cost ", time: " res.prim.time ""
}
main()
